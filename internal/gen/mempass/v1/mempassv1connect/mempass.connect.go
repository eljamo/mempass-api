// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mempass/v1/mempass.proto

package mempassv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/eljamo/mempass-api/internal/gen/mempass/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PasswordServiceName is the fully-qualified name of the PasswordService service.
	PasswordServiceName = "mempass.v1.PasswordService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PasswordServiceGeneratePasswordsProcedure is the fully-qualified name of the PasswordService's
	// GeneratePasswords RPC.
	PasswordServiceGeneratePasswordsProcedure = "/mempass.v1.PasswordService/GeneratePasswords"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	passwordServiceServiceDescriptor                 = v1.File_mempass_v1_mempass_proto.Services().ByName("PasswordService")
	passwordServiceGeneratePasswordsMethodDescriptor = passwordServiceServiceDescriptor.Methods().ByName("GeneratePasswords")
)

// PasswordServiceClient is a client for the mempass.v1.PasswordService service.
type PasswordServiceClient interface {
	GeneratePasswords(context.Context, *connect.Request[v1.GeneratePasswordsRequest]) (*connect.Response[v1.GeneratePasswordsResponse], error)
}

// NewPasswordServiceClient constructs a client for the mempass.v1.PasswordService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPasswordServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PasswordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &passwordServiceClient{
		generatePasswords: connect.NewClient[v1.GeneratePasswordsRequest, v1.GeneratePasswordsResponse](
			httpClient,
			baseURL+PasswordServiceGeneratePasswordsProcedure,
			connect.WithSchema(passwordServiceGeneratePasswordsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// passwordServiceClient implements PasswordServiceClient.
type passwordServiceClient struct {
	generatePasswords *connect.Client[v1.GeneratePasswordsRequest, v1.GeneratePasswordsResponse]
}

// GeneratePasswords calls mempass.v1.PasswordService.GeneratePasswords.
func (c *passwordServiceClient) GeneratePasswords(ctx context.Context, req *connect.Request[v1.GeneratePasswordsRequest]) (*connect.Response[v1.GeneratePasswordsResponse], error) {
	return c.generatePasswords.CallUnary(ctx, req)
}

// PasswordServiceHandler is an implementation of the mempass.v1.PasswordService service.
type PasswordServiceHandler interface {
	GeneratePasswords(context.Context, *connect.Request[v1.GeneratePasswordsRequest]) (*connect.Response[v1.GeneratePasswordsResponse], error)
}

// NewPasswordServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPasswordServiceHandler(svc PasswordServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	passwordServiceGeneratePasswordsHandler := connect.NewUnaryHandler(
		PasswordServiceGeneratePasswordsProcedure,
		svc.GeneratePasswords,
		connect.WithSchema(passwordServiceGeneratePasswordsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mempass.v1.PasswordService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PasswordServiceGeneratePasswordsProcedure:
			passwordServiceGeneratePasswordsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPasswordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPasswordServiceHandler struct{}

func (UnimplementedPasswordServiceHandler) GeneratePasswords(context.Context, *connect.Request[v1.GeneratePasswordsRequest]) (*connect.Response[v1.GeneratePasswordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mempass.v1.PasswordService.GeneratePasswords is not implemented"))
}
