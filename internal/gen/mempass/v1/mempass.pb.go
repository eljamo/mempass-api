// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: mempass/v1/mempass.proto

package mempassv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GeneratePasswordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseTransform           string   `protobuf:"bytes,1,opt,name=case_transform,json=caseTransform,proto3" json:"case_transform,omitempty"`
	NumPasswords            int32    `protobuf:"varint,2,opt,name=num_passwords,json=numPasswords,proto3" json:"num_passwords,omitempty"`
	NumWords                int32    `protobuf:"varint,3,opt,name=num_words,json=numWords,proto3" json:"num_words,omitempty"`
	PaddingCharactersAfter  int32    `protobuf:"varint,4,opt,name=padding_characters_after,json=paddingCharactersAfter,proto3" json:"padding_characters_after,omitempty"`
	PaddingCharactersBefore int32    `protobuf:"varint,5,opt,name=padding_characters_before,json=paddingCharactersBefore,proto3" json:"padding_characters_before,omitempty"`
	PaddingCharacter        string   `protobuf:"bytes,6,opt,name=padding_character,json=paddingCharacter,proto3" json:"padding_character,omitempty"`
	PaddingDigitsAfter      int32    `protobuf:"varint,7,opt,name=padding_digits_after,json=paddingDigitsAfter,proto3" json:"padding_digits_after,omitempty"`
	PaddingDigitsBefore     int32    `protobuf:"varint,8,opt,name=padding_digits_before,json=paddingDigitsBefore,proto3" json:"padding_digits_before,omitempty"`
	PaddingType             string   `protobuf:"bytes,9,opt,name=padding_type,json=paddingType,proto3" json:"padding_type,omitempty"`
	PadToLength             int32    `protobuf:"varint,10,opt,name=pad_to_length,json=padToLength,proto3" json:"pad_to_length,omitempty"`
	Preset                  string   `protobuf:"bytes,11,opt,name=preset,proto3" json:"preset,omitempty"`
	SeparatorAlphabet       []string `protobuf:"bytes,12,rep,name=separator_alphabet,json=separatorAlphabet,proto3" json:"separator_alphabet,omitempty"`
	SeparatorCharacter      string   `protobuf:"bytes,13,opt,name=separator_character,json=separatorCharacter,proto3" json:"separator_character,omitempty"`
	SymbolAlphabet          []string `protobuf:"bytes,14,rep,name=symbol_alphabet,json=symbolAlphabet,proto3" json:"symbol_alphabet,omitempty"`
	WordLengthMax           int32    `protobuf:"varint,15,opt,name=word_length_max,json=wordLengthMax,proto3" json:"word_length_max,omitempty"`
	WordLengthMin           int32    `protobuf:"varint,16,opt,name=word_length_min,json=wordLengthMin,proto3" json:"word_length_min,omitempty"`
	WordList                string   `protobuf:"bytes,17,opt,name=word_list,json=wordList,proto3" json:"word_list,omitempty"`
}

func (x *GeneratePasswordsRequest) Reset() {
	*x = GeneratePasswordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempass_v1_mempass_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePasswordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePasswordsRequest) ProtoMessage() {}

func (x *GeneratePasswordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mempass_v1_mempass_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePasswordsRequest.ProtoReflect.Descriptor instead.
func (*GeneratePasswordsRequest) Descriptor() ([]byte, []int) {
	return file_mempass_v1_mempass_proto_rawDescGZIP(), []int{0}
}

func (x *GeneratePasswordsRequest) GetCaseTransform() string {
	if x != nil {
		return x.CaseTransform
	}
	return ""
}

func (x *GeneratePasswordsRequest) GetNumPasswords() int32 {
	if x != nil {
		return x.NumPasswords
	}
	return 0
}

func (x *GeneratePasswordsRequest) GetNumWords() int32 {
	if x != nil {
		return x.NumWords
	}
	return 0
}

func (x *GeneratePasswordsRequest) GetPaddingCharactersAfter() int32 {
	if x != nil {
		return x.PaddingCharactersAfter
	}
	return 0
}

func (x *GeneratePasswordsRequest) GetPaddingCharactersBefore() int32 {
	if x != nil {
		return x.PaddingCharactersBefore
	}
	return 0
}

func (x *GeneratePasswordsRequest) GetPaddingCharacter() string {
	if x != nil {
		return x.PaddingCharacter
	}
	return ""
}

func (x *GeneratePasswordsRequest) GetPaddingDigitsAfter() int32 {
	if x != nil {
		return x.PaddingDigitsAfter
	}
	return 0
}

func (x *GeneratePasswordsRequest) GetPaddingDigitsBefore() int32 {
	if x != nil {
		return x.PaddingDigitsBefore
	}
	return 0
}

func (x *GeneratePasswordsRequest) GetPaddingType() string {
	if x != nil {
		return x.PaddingType
	}
	return ""
}

func (x *GeneratePasswordsRequest) GetPadToLength() int32 {
	if x != nil {
		return x.PadToLength
	}
	return 0
}

func (x *GeneratePasswordsRequest) GetPreset() string {
	if x != nil {
		return x.Preset
	}
	return ""
}

func (x *GeneratePasswordsRequest) GetSeparatorAlphabet() []string {
	if x != nil {
		return x.SeparatorAlphabet
	}
	return nil
}

func (x *GeneratePasswordsRequest) GetSeparatorCharacter() string {
	if x != nil {
		return x.SeparatorCharacter
	}
	return ""
}

func (x *GeneratePasswordsRequest) GetSymbolAlphabet() []string {
	if x != nil {
		return x.SymbolAlphabet
	}
	return nil
}

func (x *GeneratePasswordsRequest) GetWordLengthMax() int32 {
	if x != nil {
		return x.WordLengthMax
	}
	return 0
}

func (x *GeneratePasswordsRequest) GetWordLengthMin() int32 {
	if x != nil {
		return x.WordLengthMin
	}
	return 0
}

func (x *GeneratePasswordsRequest) GetWordList() string {
	if x != nil {
		return x.WordList
	}
	return ""
}

type GeneratePasswordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passwords []string `protobuf:"bytes,1,rep,name=passwords,proto3" json:"passwords,omitempty"`
}

func (x *GeneratePasswordsResponse) Reset() {
	*x = GeneratePasswordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mempass_v1_mempass_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePasswordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePasswordsResponse) ProtoMessage() {}

func (x *GeneratePasswordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mempass_v1_mempass_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePasswordsResponse.ProtoReflect.Descriptor instead.
func (*GeneratePasswordsResponse) Descriptor() ([]byte, []int) {
	return file_mempass_v1_mempass_proto_rawDescGZIP(), []int{1}
}

func (x *GeneratePasswordsResponse) GetPasswords() []string {
	if x != nil {
		return x.Passwords
	}
	return nil
}

var File_mempass_v1_mempass_proto protoreflect.FileDescriptor

var file_mempass_v1_mempass_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x65, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d,
	0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65, 0x6d, 0x70,
	0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x22, 0xe1, 0x05, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x73,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75,
	0x6d, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x18,
	0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x61, 0x64, 0x54, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x62, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x77, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x19, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x32, 0x75, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x2e,
	0x6d, 0x65, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xa8, 0x01, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x42,
	0x0c, 0x4d, 0x65, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x6a, 0x61,
	0x6d, 0x6f, 0x2f, 0x6d, 0x65, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x6d, 0x70,
	0x61, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x65, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x4d, 0x65, 0x6d, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x4d, 0x65, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x16, 0x4d, 0x65, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x4d, 0x65, 0x6d, 0x70,
	0x61, 0x73, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mempass_v1_mempass_proto_rawDescOnce sync.Once
	file_mempass_v1_mempass_proto_rawDescData = file_mempass_v1_mempass_proto_rawDesc
)

func file_mempass_v1_mempass_proto_rawDescGZIP() []byte {
	file_mempass_v1_mempass_proto_rawDescOnce.Do(func() {
		file_mempass_v1_mempass_proto_rawDescData = protoimpl.X.CompressGZIP(file_mempass_v1_mempass_proto_rawDescData)
	})
	return file_mempass_v1_mempass_proto_rawDescData
}

var file_mempass_v1_mempass_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mempass_v1_mempass_proto_goTypes = []interface{}{
	(*GeneratePasswordsRequest)(nil),  // 0: mempass.v1.GeneratePasswordsRequest
	(*GeneratePasswordsResponse)(nil), // 1: mempass.v1.GeneratePasswordsResponse
}
var file_mempass_v1_mempass_proto_depIdxs = []int32{
	0, // 0: mempass.v1.PasswordService.GeneratePasswords:input_type -> mempass.v1.GeneratePasswordsRequest
	1, // 1: mempass.v1.PasswordService.GeneratePasswords:output_type -> mempass.v1.GeneratePasswordsResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mempass_v1_mempass_proto_init() }
func file_mempass_v1_mempass_proto_init() {
	if File_mempass_v1_mempass_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mempass_v1_mempass_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratePasswordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mempass_v1_mempass_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratePasswordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mempass_v1_mempass_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mempass_v1_mempass_proto_goTypes,
		DependencyIndexes: file_mempass_v1_mempass_proto_depIdxs,
		MessageInfos:      file_mempass_v1_mempass_proto_msgTypes,
	}.Build()
	File_mempass_v1_mempass_proto = out.File
	file_mempass_v1_mempass_proto_rawDesc = nil
	file_mempass_v1_mempass_proto_goTypes = nil
	file_mempass_v1_mempass_proto_depIdxs = nil
}
