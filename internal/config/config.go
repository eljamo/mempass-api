package config

import (
	"encoding/json"
	"fmt"

	"connectrpc.com/connect"
	"github.com/eljamo/libpass/v7/asset"
	"github.com/eljamo/libpass/v7/config"
	"github.com/eljamo/libpass/v7/config/option"
	mempassv1 "github.com/eljamo/mempass-api/internal/gen/mempass/v1" // generated by protoc-gen-connect-go
)

func Generate(req *connect.Request[mempassv1.GeneratePasswordsRequest]) (*config.Settings, error) {
	basePreset, err := loadJSONFiles(req)
	if err != nil {
		return nil, err
	}

	var cfg map[string]any
	msg, err := json.Marshal(req.Msg)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request message: %w", err)
	}
	if err := json.Unmarshal(msg, &cfg); err != nil {
		return nil, fmt.Errorf("failed to unmarshal request message: %w", err)
	}

	settings, err := config.New(basePreset, cfg)
	if err != nil {
		return nil, fmt.Errorf("failed to create config: %w", err)
	}

	return settings, nil
}

func loadJSONFiles(req *connect.Request[mempassv1.GeneratePasswordsRequest]) (map[string]any, error) {
	presetValue := getPresetValue(req)

	if presetValue == option.PresetDefault {
		return nil, nil
	}

	basePreset, err := asset.GetJSONPreset(presetValue)
	if err != nil {
		return nil, fmt.Errorf("failed to load preset: %w", err)
	}

	return basePreset, nil
}

func getPresetValue(req *connect.Request[mempassv1.GeneratePasswordsRequest]) string {
	presetValue := req.Msg.GetPreset()

	if presetValue == "" {
		presetValue = option.PresetDefault
	}

	return presetValue
}
