package main

import (
	"net/http"

	"connectrpc.com/connect"
	"connectrpc.com/grpchealth"
	"connectrpc.com/grpcreflect"

	"github.com/eljamo/mempass-api/internal/gen/mempass/v1/mempassv1connect" // generated by protoc-gen-connect-go
)

func appendSystemRoutes(mux *http.ServeMux, compressionThreshold connect.Option) {
	mux.Handle(grpchealth.NewHandler(
		grpchealth.NewStaticChecker(mempassv1connect.PasswordServiceName),
		compressionThreshold,
	))
	mux.Handle(grpcreflect.NewHandlerV1(
		grpcreflect.NewStaticReflector(mempassv1connect.PasswordServiceName),
		compressionThreshold,
	))
	mux.Handle(grpcreflect.NewHandlerV1Alpha(
		grpcreflect.NewStaticReflector(mempassv1connect.PasswordServiceName),
		compressionThreshold,
	))
}

func appendRoutes(mux *http.ServeMux, compressionThreshold connect.Option, app *application) {
	mux.Handle(mempassv1connect.NewPasswordServiceHandler(
		&PasswordServiceHandler{
			app.logger,
		},
		compressionThreshold,
		app.interceptors,
	))
}

func (app *application) routes() http.Handler {
	compressionThreshold := connect.WithCompressMinBytes(1024)
	mux := http.NewServeMux()

	appendSystemRoutes(mux, compressionThreshold)
	appendRoutes(mux, compressionThreshold, app)

	return mux
}
