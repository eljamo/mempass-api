package main

import (
	"context"
	"log/slog"

	"connectrpc.com/connect"

	"github.com/eljamo/libpass/v5/service"
	"github.com/eljamo/mempass-api/internal/config"
	mempassv1 "github.com/eljamo/mempass-api/internal/gen/mempass/v1" // generated by protoc-gen-connect-go
)

type PasswordServiceHandler struct {
	logger *slog.Logger
}

func (h *PasswordServiceHandler) GeneratePasswords(
	ctx context.Context,
	req *connect.Request[mempassv1.GeneratePasswordsRequest],
) (*connect.Response[mempassv1.GeneratePasswordsResponse], error) {
	cfg, err := config.Generate(req)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, err)
	}

	svc, err := service.NewPasswordGeneratorService(cfg)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, err)
	}

	pws, err := svc.Generate()
	if err != nil {
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	return connect.NewResponse(&mempassv1.GeneratePasswordsResponse{Passwords: pws}), nil
}
